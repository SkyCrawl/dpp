<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigReaderConfigNotValidated" xml:space="preserve">
    <value>...Configuration not validated.</value>
  </data>
  <data name="ConfigReaderConfigValidated" xml:space="preserve">
    <value>...Configuration validated against a specification.
	Origin: {0}.</value>
  </data>
  <data name="ConfigReaderConfusingLinkTarget" xml:space="preserve">
    <value>Line {0}: link specifies too many target components in section '{1}' and option '{2}'. The link:
	{3}</value>
  </data>
  <data name="ConfigReaderDuplicateOption" xml:space="preserve">
    <value>Line {0}: duplicate option '{1}' in section '{2}'.</value>
  </data>
  <data name="ConfigReaderDuplicateSection" xml:space="preserve">
    <value>Line {0}: duplicate section ('{1}').</value>
  </data>
  <data name="ConfigReaderIncompleteLinkTarget" xml:space="preserve">
    <value>Line {0}: link specifies too few target components in section '{1}' and option '{2}'. The link:
	{3}</value>
  </data>
  <data name="ConfigReaderInvalidLinkTarget" xml:space="preserve">
    <value>Line {0}: link target (section '{1}' and option '{2}') not found.
	Link defined in section '{3}' and option '{4}'.</value>
  </data>
  <data name="ConfigReaderInvalidSpecification" xml:space="preserve">
    <value>ERROR: strict validation mode was applied but the received specification was not valid.</value>
  </data>
  <data name="ConfigReaderNewConfigStart" xml:space="preserve">
    <value>...Commencing new configuration parsing task.</value>
  </data>
  <data name="ConfigReaderNoOptionSpecification" xml:space="preserve">
    <value>Line {0}: specification is missing definition for option '{1}' in section '{2}'.</value>
  </data>
  <data name="ConfigReaderNoSectionSpecification" xml:space="preserve">
    <value>Line {0}: specification is missing definition for section '{1}'.</value>
  </data>
  <data name="ConfigReaderNoSpecification" xml:space="preserve">
    <value>ERROR: strict validation mode was applied but no specification has been specified.</value>
  </data>
  <data name="ConfigReaderUnknownLineSyntax" xml:space="preserve">
    <value>Line {0}: unknown syntax. Content:
	{1}</value>
  </data>
  <data name="ConfigReaderValidationMode" xml:space="preserve">
    <value>...Validation mode: {0}.</value>
  </data>
  <data name="ConfigValidationInvalidSpecification" xml:space="preserve">
    <value>ERROR: configuration can not be validated because its associated specification is not valid.</value>
  </data>
  <data name="ConfigValidationLinkInconsistent" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' contains a link that references a removed option '{2}' or section '{3}'.</value>
  </data>
  <data name="ConfigValidationMissingMandatoryOption" xml:space="preserve">
    <value>ERROR: missing mandatory option '{0}' in section '{1}'.
	Hint: try relaxed validation mode.</value>
  </data>
  <data name="ConfigValidationMissingMandatorySection" xml:space="preserve">
    <value>ERROR: missing mandatory section '{0}'.
	Hint: try relaxed validation mode.</value>
  </data>
  <data name="ConfigValidationNoOptionSpecification" xml:space="preserve">
    <value>ERROR: validation of option '{0}' in section '{1}' was skipped as it wasn't found in the associated specification.</value>
  </data>
  <data name="ConfigValidationNoSectionSpecification" xml:space="preserve">
    <value>ERROR: validation of section '{0}' was skipped as it wasn't found in the associated specification.</value>
  </data>
  <data name="ConfigValidationNoSpecification" xml:space="preserve">
    <value>ERROR: configuration can not be validated because it isn't associated to a specification.</value>
  </data>
  <data name="ConfigValidationNoValue" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' is mandatory but it doesn't contain a value.</value>
  </data>
  <data name="ConfigValidationTooManyValues" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' is declared as single-value but instead it contains multiple values.</value>
  </data>
  <data name="ConfigValidationValueNotAllowed" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' contains a value that is not explicitly allowed ('{2}').</value>
  </data>
  <data name="ConfigValidationValueOutOfRange" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' contains a value that is out of range ('{2}').</value>
  </data>
  <data name="ConfigValidationValueTypeMismatch" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' is of type '{2}'. Expected: '{3}'.</value>
  </data>
  <data name="ReaderOrigin" xml:space="preserve">
    <value>	Origin: {0}.</value>
  </data>
  <data name="SpecReaderNewSpecification" xml:space="preserve">
    <value>...Commencing new specification parsing task.</value>
  </data>
  <data name="SpecValidationDuplicateOption" xml:space="preserve">
    <value>ERROR: duplicate option '{0}' in section '{1}'.</value>
  </data>
  <data name="SpecValidationDuplicateSection" xml:space="preserve">
    <value>ERROR: duplicate section '{0}'.</value>
  </data>
  <data name="SpecValidationNoEnumValues" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' doesn't define enough enumeration values.</value>
  </data>
  <data name="SpecValidationNoValue" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' is optional but it doesn't define any default value.</value>
  </data>
  <data name="SpecValidationTooManyValues" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' is declared as single-value but instead it defines multiple default values.</value>
  </data>
  <data name="SpecValidationValueNotAllowed" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' contains a default value ('{2}') that is not explicitly allowed.</value>
  </data>
  <data name="SpecValidationValueOutOfRange" xml:space="preserve">
    <value>ERROR: option '{0}' in section '{1}' contains a default value ('{2}') that is out of range.</value>
  </data>
  <data name="WriterInvalidConfiguration" xml:space="preserve">
    <value>ERROR: invalid configuration. Stopping...
	Hint: either correct the configuration or try again with validation disabled.</value>
  </data>
  <data name="WriterNoSpecification" xml:space="preserve">
    <value>ERROR: no specification to use. Stopping...
	Hint: either associate the configuration with a specification or try again with different options.</value>
  </data>
</root>